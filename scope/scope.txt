//version "2.4"

class ScopeHandler : EventHandler
{
	private ui double oldFOV;
	private ui Vector2 oldPos;
	private ui Shape2D circle;
	
	ui Vector2 pos;
	ui Scope sc;
	ui TextureID lens;
	
	override void WorldLoaded(WorldEvent e)
	{
		// Reset scope drawing if reentering a level
		if (e.isReopen)
		{
			ThinkerIterator it = ThinkerIterator.Create("Scope", Thinker.STAT_DEFAULT);
			Scope mo;
			while (mo = Scope(it.Next()))
			{
				if (mo)
					mo.bDrawScope = false;
			}
			
			return;
		}
		
		// Spawn a scope actor for each player when entering a new level
		for (uint i = 0; i < MAXPLAYERS; ++i)
		{
			if (!playerInGame[i] || !players[i].mo)
				continue;
			
			let cam = Actor.Spawn("Scope");
			if (cam)
				cam.master = players[i].mo;
		}
	}
	
	override void UITick()
	{
		if (!circle)
			circle = CreateCircle();
		
		// Check valid player scope
		if (!sc)
			sc = FindScope(consoleplayer);
		
		// Check valid camera texture
		if (!lens.IsValid())
			lens = TexMan.CheckForTexture("SCAMTEX1", TexMan.Type_Any);
		
		// Update scope if weapon camera FOV changed
		double fov = oldFOV;
		let weap = players[consoleplayer].ReadyWeapon;
		if (weap)
		{
			fov = weap.CameraFOV;
			if (fov != oldFOV)
				TexMan.SetCameraToTexture(sc, "SCAMTEX1", fov);
		}
		
		oldPos = pos;
		oldFOV = fov;
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		if (!sc)
			return;
		
		// Calculate position to interpolate to
		if (players[consoleplayer].ReadyWeapon)
		{
			let psp = players[consoleplayer].GetPSprite(PSP_WEAPON);
			pos = (psp.x + sc.bob.x, (psp.y - WEAPONTOP) + sc.bob.y);
		}
		else
			pos = oldPos;
		
		if (!sc.bDrawScope)
			return;
		
		// Account for the view port
		int wOfs, hOfs, w, h;
		[wOfs, hOfs, w, h] = Screen.GetViewWindow();
		
		// Make sure scope stays proportional to resolution (based on 1920x1080)
		int height = Screen.GetHeight();
		int width = Screen.GetWidth();
		
		// Scale PSprite coordinates to real screen
		Vector2 scale;
		scale.x = w / (240 * Screen.GetAspectRatio());
		scale.y = (height*w) / (width*200.);
		
		// Account for the status bar
		double multi = h / (hOfs*2. + h) * height / 1080.;
		
		// Center screen then translate weapon offsets to the proper resolution
		Vector2 realPos = Lerp(oldPos, pos, e.fracTic);
		int x = wOfs + w/2 + realPos.x*scale.x;
		int y = hOfs +  h/2 + realPos.y*scale.y;
		Vector2 size = TexMan.GetScaledSize(lens);
		
		// Make sure it can't draw outside of the view port
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = Screen.GetClipRect();
		Screen.SetClipRect(wOfs, hOfs, w, h);
		
		DrawScope(lens, circle, size.x/2 * multi, (x,y));
		
		Screen.SetClipRect(cx, cy, cw, ch);
	}
	
	ui Scope FindScope(uint playernum)
	{
		if (playernum >= MAXPLAYERS)
			return null;
		
		ThinkerIterator it = ThinkerIterator.Create("Scope", Thinker.STAT_DEFAULT);
		Scope mo;
		while (mo = Scope(it.Next()))
		{
			if (mo && mo.master == players[playernum].mo)
				return mo;
		}
		
		return null;
	}
	
	// verts describes how detailed the circle of the scope is
	// more verts = higher resolution circle but higher performance cost
	ui static Shape2D CreateCircle(uint verts = 64)
	{
		Shape2D circle = new("Shape2D");
		
		double angStep = 360. / verts;
		double ang;
		for (uint i = 0; i < verts; ++i)
		{
			double c = cos(ang);
			double s = sin(ang);
			
			circle.PushVertex((c,s));
			circle.PushCoord(((c+1)/2, (s+1)/2));
			
			if (i+2 < verts)
				circle.PushTriangle(0, i+1, i+2);
			
			ang += angStep;
		}
		
		return circle;
	}
	
	ui void DrawScope(TextureID id, Shape2D shape, int scale, Vector2 pos, double rotAng = 0)
    {
		if (!shape)
			return;
		
		let transform = new("Shape2DTransform");
		transform.Scale((scale,scale));
		transform.Rotate(rotAng);
		transform.Translate(pos);
		
		shape.SetTransform(transform);
		Screen.DrawShape(id, false, circle);
    }
	
	ui Vector2 Lerp(in Vector2 a, in Vector2 b, double t)
	{
		return a*(1-t) + b*t;
	}
}

class Scope : Actor
{
	private Vector3 prevPos;
	private Vector2 prevAngles;
	private Vector2 prevOffset;
	
	Vector2 bob;
	bool bDrawScope;
	
	double forwardOffset;
	double sideOffset;
	double upOffset;
	
	property ForwardOffset : forwardOffset;
	property SideOffset : sideOffset;
	property UpOffset : upOffset;
	
	Default
	{
		Scope.ForwardOffset 4;
		Height 0;
		Radius 0;
		
		+INTERPOLATEANGLES
		+NOBLOCKMAP
	}
	
	override void Tick()
	{
		if (!master || !master.player || master.health <= 0)
		{
			bDrawScope = false;
			return;
		}
		
		// Check if zoom pressed (acts as a toggle)
		if ((master.player.cmd.buttons & BT_ZOOM) && !(master.player.oldbuttons & BT_ZOOM))
			bDrawScope = !bDrawScope;
		
		if (!master.player.ReadyWeapon || master.player.ReadyWeapon.CameraFOV <= 0)
			bDrawScope = false;
		
		double prevBob = master.player.mo.curbob;
		bob = master.player.mo.BobWeapon(1);
		master.player.mo.curbob = prevBob;
		
		Vector2 angles = (master.angle, master.pitch);
		Vector3 viewPos = (master.pos.xy, master.player.viewz);
		Vector2 offset = (0,0);
		
		PSprite psp;
		if (master.player.ReadyWeapon)
			psp = master.player.GetPSprite(PSP_WEAPON);
		
		if (psp)
			offset = (psp.x, psp.y - WEAPONTOP);
		
		if (viewPos == prevPos && angles == prevAngles && offset == prevOffset)
		{
			roll = master.roll;
			return;
		}
		
		Vector2 forOfs = AngleToVector(master.angle);
		Vector3 forward = (forOfs*cos(master.pitch), -sin(master.pitch));
		
		Vector2 xyOfs;
		double zOfs;
		if (psp)
		{
			xyOfs = AngleToVector(master.angle-90, (psp.x + bob.x)/8 + sideOffset);
			zOfs = ((psp.y - WEAPONTOP) + bob.y) / 8;
		}
		else
			xyOfs = AngleToVector(master.angle-90, sideOffset);
		
		Vector3 newPos = master.pos + forward*(master.radius/2) +
						(forOfs*forwardOffset + xyOfs, upOffset + (master.player.viewz-master.pos.z) - zOfs);
						
		SetXYZ(newPos);
		angle = master.angle;
		pitch = master.pitch;
		roll = master.roll;
		
		prevPos = viewPos;
		prevAngles = angles;
		prevOffset = offset;
	}
}